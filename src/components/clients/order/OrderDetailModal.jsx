import { useState } from "react";
import {
  Modal,
  Card,
  Badge,
  Row,
  Col,
  ListGroup,
  Table,
} from "react-bootstrap";
import { convertDate, convertVND } from "../../../config/customeFunction";

const OrderDetailModal = ({ show, onHide, orderData }) => {
  if (!orderData) return null;

  // Function ƒë·ªÉ ch·ªçn m√†u badge cho tr·∫°ng th√°i ƒë∆°n h√†ng
  const getStatusBadge = (status) => {
    const statusConfig = {
      PROCESSING: { bg: "warning", text: "ƒêang x·ª≠ l√Ω", icon: "‚è≥" },
      CONFIRMED: { bg: "info", text: "ƒê√£ x√°c nh·∫≠n", icon: "‚úÖ" },
      SHIPPED: { bg: "primary", text: "ƒêang giao", icon: "üöö" },
      DELIVERED: { bg: "success", text: "ƒê√£ giao", icon: "üì¶" },
      CANCELLED: { bg: "danger", text: "ƒê√£ h·ªßy", icon: "‚ùå" },
      "ƒêang x·ª≠ l√Ω": { bg: "warning", text: "ƒêang x·ª≠ l√Ω", icon: "‚è≥" },
    };

    const config = statusConfig[status] || {
      bg: "secondary",
      text: status,
      icon: "üìã",
    };

    return (
      <Badge bg={config.bg} className="px-3 py-2 fs-6">
        {config.icon} {config.text}
      </Badge>
    );
  };

  // Function ƒë·ªÉ ch·ªçn m√†u badge cho tr·∫°ng th√°i thanh to√°n
  const getPaymentStatusBadge = (status) => {
    const statusConfig = {
      SUCCESS: { bg: "success", text: "ƒê√£ thanh to√°n", icon: "üí≥" },
      PENDING: { bg: "warning", text: "Ch·ªù thanh to√°n", icon: "‚è∞" },
      FAILED: { bg: "danger", text: "Thanh to√°n th·∫•t b·∫°i", icon: "‚ùå" },
      "Ch∆∞a thanh to√°n": { bg: "warning", text: "Ch∆∞a thanh to√°n", icon: "‚è∞" },
    };

    const config = statusConfig[status] || {
      bg: "secondary",
      text: status,
      icon: "üí∞",
    };

    return (
      <Badge bg={config.bg} className="px-2 py-1">
        {config.icon} {config.text}
      </Badge>
    );
  };

  const getPaymentMethodBadge = (method) => {
    const methodConfig = {
      "Credit Card": { bg: "primary", text: "Th·∫ª t√≠n d·ª•ng", icon: "üí≥" },
      "Nh·∫≠n h√†ng thanh to√°n": { bg: "info", text: "COD", icon: "üíµ" },
      "Bank Transfer": { bg: "success", text: "Chuy·ªÉn kho·∫£n", icon: "üè¶" },
      VNPAY: { bg: "danger", text: "VNPay", icon: "üì±" },
    };

    const config = methodConfig[method] || {
      bg: "secondary",
      text: method,
      icon: "üí∞",
    };

    return (
      <Badge bg={config.bg} className="px-2 py-1">
        {config.icon} {config.text}
      </Badge>
    );
  };

  return (
    <Modal
      show={show}
      onHide={onHide}
      size="xl"
      centered
      className="order-detail-modal"
    >
      <Modal.Header closeButton className="border-bottom-0 pb-2">
        <Modal.Title className="d-flex align-items-center">
          <i className="bi bi-receipt me-2 text-primary"></i>
          <span>Chi ti·∫øt ƒë∆°n h√†ng #{orderData.orderId}</span>
          <div className="ms-3">{getStatusBadge(orderData.status)}</div>
        </Modal.Title>
      </Modal.Header>

      <Modal.Body className="pt-0">
        <div className="order-detail-content">
          {/* Header th√¥ng tin c∆° b·∫£n */}
          <Row className="mb-4">
            <Col md={6}>
              <Card className="info-card h-100">
                <Card.Header className="bg-light border-0">
                  <h6 className="mb-0 text-primary">
                    <i className="bi bi-calendar-event me-2"></i>
                    Th√¥ng tin ƒë∆°n h√†ng
                  </h6>
                </Card.Header>
                <Card.Body>
                  <div className="info-item mb-2">
                    <small className="text-muted d-block">Ng√†y ƒë·∫∑t h√†ng</small>
                    <strong>{convertDate(orderData.orderDate)}</strong>
                  </div>
                  <div className="info-item mb-2">
                    <small className="text-muted d-block">Ng∆∞·ªùi ƒë·∫∑t</small>
                    <strong>{orderData.userName}</strong>
                  </div>
                  <div className="info-item">
                    <small className="text-muted d-block">M√£ giao d·ªãch</small>
                    <code className="text-primary">
                      {orderData.payments[0]?.transactionId || "N/A"}
                    </code>
                  </div>
                </Card.Body>
              </Card>
            </Col>

            <Col md={6}>
              <Card className="info-card h-100">
                <Card.Header className="bg-light border-0">
                  <h6 className="mb-0 text-success">
                    <i className="bi bi-truck me-2"></i>
                    Th√¥ng tin giao h√†ng
                  </h6>
                </Card.Header>
                <Card.Body>
                  <div className="info-item mb-2">
                    <small className="text-muted d-block">
                      ƒê·ªãa ch·ªâ giao h√†ng
                    </small>
                    <strong>{orderData.shippingAddress}</strong>
                  </div>
                  <div className="info-item mb-2">
                    <small className="text-muted d-block">
                      Ph∆∞∆°ng th·ª©c giao h√†ng
                    </small>
                    <Badge bg="outline-secondary" className="px-2 py-1">
                      üöö {orderData.shippingMethod}
                    </Badge>
                  </div>
                  <div className="info-item">
                    <small className="text-muted d-block">Ph√≠ giao h√†ng</small>
                    <strong className="text-success">
                      {convertVND(orderData.shippingFee)}
                    </strong>
                  </div>
                </Card.Body>
              </Card>
            </Col>
          </Row>

          {/* Th√¥ng tin thanh to√°n */}
          <Card className="mb-4">
            <Card.Header className="bg-light border-0">
              <h6 className="mb-0 text-warning">
                <i className="bi bi-credit-card me-2"></i>
                Th√¥ng tin thanh to√°n
              </h6>
            </Card.Header>
            <Card.Body>
              <Row>
                <Col md={4}>
                  <div className="info-item">
                    <small className="text-muted d-block">
                      Ph∆∞∆°ng th·ª©c thanh to√°n
                    </small>
                    {getPaymentMethodBadge(
                      orderData.payments[0]?.paymentMethod
                    )}
                  </div>
                </Col>
                <Col md={4}>
                  <div className="info-item">
                    <small className="text-muted d-block">
                      Tr·∫°ng th√°i thanh to√°n
                    </small>
                    {getPaymentStatusBadge(
                      orderData.payments[0]?.transactionStatus
                    )}
                  </div>
                </Col>
                <Col md={4}>
                  <div className="info-item">
                    <small className="text-muted d-block">
                      Ng√†y thanh to√°n
                    </small>
                    <strong>
                      { orderData.payments[0]?.transactionStatus !== "Ch∆∞a thanh to√°n"
                        ? convertDate(orderData.payments[0].paymentDate)
                        : "Ch∆∞a thanh to√°n"}
                    </strong>
                  </div>
                </Col>
              </Row>
            </Card.Body>
          </Card>

          {/* Chi ti·∫øt s·∫£n ph·∫©m */}
          <Card className="mb-4">
            <Card.Header className="bg-light border-0 d-flex justify-content-between align-items-center">
              <h6 className="mb-0 text-info">
                <i className="bi bi-box me-2"></i>
                Chi ti·∫øt s·∫£n ph·∫©m ({orderData.orderDetails.length} s·∫£n ph·∫©m)
              </h6>
            </Card.Header>
            <Card.Body className="p-0">
              <div className="table-responsive">
                <Table className="mb-0" hover>
                  <thead className="table-light">
                    <tr>
                      <th className="border-0">S·∫£n ph·∫©m</th>
                      <th className="border-0 text-center">S·ªë l∆∞·ª£ng</th>
                      <th className="border-0 text-end">Gi√° g·ªëc</th>
                      <th className="border-0 text-end">Gi√° khuy·∫øn m√£i</th>
                      <th className="border-0 text-end">Th√†nh ti·ªÅn</th>
                    </tr>
                  </thead>
                  <tbody>
                    {orderData.orderDetails.map((item) => (
                      <tr key={item.orderDetailId}>
                        <td className="align-middle">
                          <div className="product-info">
                            <strong className="product-name">
                              {item.productName}
                            </strong>
                            <small className="text-muted d-block">
                              ID: {item.productId}
                            </small>
                          </div>
                        </td>
                        <td className="text-center align-middle">
                          <Badge
                            bg="light"
                            text="dark"
                            className="px-3 py-2 fs-6"
                          >
                            {item.quantity}
                          </Badge>
                        </td>
                        <td className="text-end align-middle">
                          <span className="original-price">
                            {convertVND(item.originalPrice)}
                          </span>
                        </td>
                        <td className="text-end align-middle">
                          <strong className="final-price">
                            {convertVND(item.finalPrice)}
                          </strong>
                          {item.finalPrice < item.originalPrice && (
                            <small className="text-success d-block">
                              -$
                              {convertVND(item.originalPrice - item.finalPrice)}
                            </small>
                          )}
                        </td>
                        <td className="text-end align-middle">
                          <strong className="total-price">
                            {convertVND(item.finalPrice * item.quantity)}
                          </strong>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              </div>
            </Card.Body>
          </Card>

          {/* T·ªïng k·∫øt ƒë∆°n h√†ng */}
          <Card className="order-summary">
            <Card.Header className="bg-primary text-white border-0">
              <h6 className="mb-0">
                <i className="bi bi-calculator me-2"></i>
                T·ªïng k·∫øt ƒë∆°n h√†ng
              </h6>
            </Card.Header>
            <Card.Body>
              <Row>
                <Col md={6}>
                  <ListGroup variant="flush">
                    <ListGroup.Item className="d-flex justify-content-between border-0 px-0">
                      <span>T·∫°m t√≠nh:</span>
                      <span>{convertVND(orderData.subtotalAmount)}</span>
                    </ListGroup.Item>
                    <ListGroup.Item className="d-flex justify-content-between border-0 px-0">
                      <span>Ph√≠ giao h√†ng:</span>
                      <span>{convertVND(orderData.shippingFee)}</span>
                    </ListGroup.Item>
                  </ListGroup>
                </Col>
                <Col md={6}>
                  <div className="total-section p-3 bg-light rounded">
                    <div className="d-flex justify-content-between align-items-center">
                      <h5 className="mb-0">T·ªïng c·ªông:</h5>
                      <h4 className="mb-0 text-danger">
                        {convertVND(orderData.finalAmount)}
                      </h4>
                    </div>
                  </div>
                </Col>
              </Row>
            </Card.Body>
          </Card>
        </div>
      </Modal.Body>

      <Modal.Footer className="border-top-0 pt-0">
        <div className="d-flex justify-content-between w-100">
          <div>
            <button
              type="button"
              className="btn btn-secondary me-2"
              onClick={onHide}
            >
              ƒê√≥ng
            </button>
          </div>
        </div>
      </Modal.Footer>
    </Modal>
  );
};

export default OrderDetailModal;
